import * as Eris from "eris";
import * as minimist from "minimist";
import { Shard } from "../client/Shard";
import { ICommandArg, ICommandPermission } from "./Command";
import { Ratelimiter } from "./Ratelimiter";
/**
 * Command handler class
 *
 * @export
 * @class CommandHandler
 */
export declare class CommandHandler {
    private shard;
    /**
     * Map of buckets
     *
     * @type {Map<string, Ratelimiter>}
     */
    buckets: Map<string, Ratelimiter>;
    constructor(shard: Shard);
    /**
     * Initializes the command handler
     *
     * @returns {Promise<void>}
     */
    init(): Promise<void>;
    /**
     * Check if a message is a command
     *
     * @param {Eris.Message} msg Message
     * @returns {Promise<void>}
     */
    checkMessage(msg: Eris.Message): Promise<void>;
    /**
     * Execute a command
     *
     * @param {Eris.Message} msg Message
     * @param {string} command Command name
     * @param {minimist.ParsedArgs} args Arguments
     * @param {string} prefix Prefix used
     * @returns {Promise<any>}
     */
    executeCommand(msg: Eris.Message, command: string, args: minimist.ParsedArgs, prefix: string): Promise<any>;
    /**
     * Check the permissions
     *
     * @param {Eris.Message} msg Message
     * @param {ICommandPermission[]} perms Array of permissions
     * @returns {Promise<map>}
     */
    checkPermissions(msg: Eris.Message, perms: ICommandPermission[]): Promise<{
        [key: string]: boolean;
    }>;
    /**
     * Check the bot permissions
     *
     * @param {Eris.Message} msg Message
     * @param {ICommandPermission[]} perms Array of permissions
     * @returns {Promise<map>}
     */
    checkBotPermissions(msg: Eris.Message, perms: ICommandPermission[]): Promise<{
        [key: string]: boolean;
    }>;
    /**
     * Check the arguments and return new args
     *
     * @todo add search things
     * @todo add websockets and try to get the guild/user from another shard
     *
     * @param {Eris.Message} msg Message
     * @param {string[]} given Array of given arguments
     * @param {ICommandArg[]} args Array of command args
     * @returns {Promise<map>}
     */
    checkArguments(msg: Eris.Message, given: string[], args: ICommandArg[]): Promise<{
        [key: string]: any;
    }>;
}
