import * as Eris from "eris";
import * as minimist from "minimist";
import * as vm from "vm";
import { Shard } from "../client/Shard";
export interface IEvalContext extends vm.Context {
    [key: string]: any;
}
/**
 * Context class
 *
 * @export
 * @class Context
 */
export declare class Context {
    shard: Shard;
    msg: Eris.Message;
    prefix: string;
    command: string;
    flags: minimist.ParsedArgs;
    args: {
        [key: string]: any;
    };
    /**
     * Message author
     * @see https://abal.moe/Eris/docs/User
     *
     * @type {Eris.User}
     */
    author: Eris.User;
    /**
     * Channel the message was sent in
     * @see https://abal.moe/Eris/docs/Channel
     * @see https://abal/moe/Eris/docs/GuildChannel
     * @see https://abal.moe/Eris/docs/PrivateChannel
     *
     * @type {(Eris.GuildChannel | Eris.PrivateChannel | Eris.GroupChannel)}
     */
    channel: Eris.GuildChannel | Eris.PrivateChannel | Eris.GroupChannel;
    /**
     * Channel mentions in the message
     *
     * @type {(string[] | undefined)}
     */
    channelMentions?: string[] | undefined;
    /**
     * Content of the message
     *
     * @type {(string | undefined)}
     */
    content: string | undefined;
    /**
     * Embeds on the message
     *
     * @type {Eris.Embed[]}
     */
    embeds: Eris.Embed[];
    /**
     * Clean message content (<@id> -> @username)
     *
     * @type {(string | undefined)}
     */
    cleanContent: string | undefined;
    /**
     * Guild the message was sent in
     * @see https://abal.moe/Eris/docs/Guild
     *
     * @type {(Eris.Guild | undefined)}
     */
    guild?: Eris.Guild | undefined;
    /**
     * Member that sent the message
     * @see https://abal.moe/Eris/docs/Member
     *
     * @type {(Eris.Member | undefined)}
     */
    member?: Eris.Member | undefined;
    /**
     * User mentions in the message
     *
     * @type {Eris.User[]}
     */
    mentions: Eris.User[];
    /**
     * When the message was sent
     *
     * @type {number}
     */
    timestamp: number;
    /**
     * When the message was last edited
     *
     * @type {(number | undefined)}
     */
    editedTimestamp: number | undefined;
    /**
     * Role mentions in the message
     *
     * @type {string[]}
     */
    roleMentions: string[];
    /**
     * Message content without flags
     *
     * @type {string}
     */
    suffix: string;
    constructor(shard: Shard, msg: Eris.Message, prefix: string, command: string, flags: minimist.ParsedArgs, args: {
        [key: string]: any;
    });
    /**
     * Sends a message to the channel the message was sent in
     * @example ctx.send("a", "b", "nya") // a b nya
     *
     * @param {...any[]} args Content to send
     * @returns {Promise<Eris.Message>}
     */
    send(...args: any[]): Promise<Eris.Message>;
    /**
     * Send a message like you normally would in Eris
     *
     * @see https://abal.moe/Eris/docs/Channel#function-createMessage
     *
     * @param {Eris.MessageContent} content Content to send
     * @param {Eris.MessageFile} [file] File to send
     * @returns {Promise<Eris.Message>}
     */
    createMessage(content: Eris.MessageContent, file?: Eris.MessageFile): Promise<Eris.Message>;
    /**
     * Sends a codeblock
     *
     * @example ctx.sendCode("ts", "const nya: Nya<awoo> = new Nya<awoo>()")
     *
     * @param {string} type Code language
     * @param {...any[]} code Code to send
     * @returns {Promise<Eris.Message>}
     */
    sendCode(type: string, ...code: any[]): Promise<Eris.Message>;
    /**
     * Advanced (typescript) eval, linter included.
     *
     * @example const myEval = ctx.eval("interface IREEE { bool: boolean; }; const myREEE: IREEE = { bool: true }; myREEE;").eval // myEval = { bool: true }
     *
     * @param {string} code Code to run
     * @param {map} customProps Custom properties to include in the eval context
     * @returns {Promise<any>}
     */
    eval(code: string, customProps: {
        [key: string]: any;
    }): Promise<any>;
}
