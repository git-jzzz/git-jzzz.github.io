import { Command } from "./Command";
/**
 * Sets the command name
 *
 * @example @Hibiki.ext.command("nya")
 * class MyCommand extends Hibiki.Command {
 *
 * @decorator
 * @memberof ext
 * @export
 * @param {string} name Command name
 * @returns {ClassDecorator}
 */
export declare function command(name: string): ClassDecorator;
/**
 * Adds an argument to the command
 *
 * @example @Hibiki.ext.argument("nyan", "user", false)
 * class MyCommand extends Hibiki.Command {
 *
 *      public run (ctx: Hibiki.Context): Promise<any> {
 *          // ctx.args.nyan = given user
 *          ctx.send(ctx.args.nyan.username);
 *
 * @decorator
 * @memberof ext
 * @export
 * @param {string} name Argument name
 * @param {string} type Argument type (user, guild, channel, role, string, number)
 * @param {boolean} optional Whether the argument is optional or not
 * @returns {ClassDecorator}
 */
export declare function argument(name: string, type: string, optional: boolean): ClassDecorator;
/**
 * Adds a required permission
 *
 * @example @Hibiki.ext.permission("manageGuild", true) // set the permission to `optional` because we don't need it
 * class MyCommand extends Hibiki.Command {
 *
 *      public run (ctx: Hibiki.Context): Promise<any> {
 *          ctx.send(ctx.perms.manageGuild) // sends if the user has the permission or not
 *
 * @decorator
 * @memberof ext
 * @export
 * @param {string} name Permission name @see https://abal.moe/Eris/docs/reference
 * @param {boolean} optional Sets the permission to optional
 * @param {boolean} [bot] If the permission should be required by the bot rather than the user
 * @returns {ClassDecorator}
 */
export declare function permission(name: string, optional: boolean, bot?: boolean): ClassDecorator;
/**
 * Adds a subcommand on the command
 *
 * @example @Hibiki.ext.subcommand(MySubcommand)
 * class MyCommand extends Hibiki.Command {
 *
 * @decorator
 * @memberof ext
 * @export
 * @param {Command} Subcommand Command class to use
 * @returns {ClassDecorator}
 */
export declare function subcommand(Subcommand: new () => Command): ClassDecorator;
/**
 * Sets the command description
 *
 * @example @Hibiki.ext.description("nya", "nya", "nya") // nya nya nya
 * class MyCommand extends Hibiki.Command {
 *
 * @decorator
 * @memberof ext
 * @export
 * @param {...any[]} args Description
 * @returns {ClassDecorator}
 */
export declare function description(...args: any[]): ClassDecorator;
/**
 * Sets the command to owner only
 *
 * @decorator
 * @memberof ext
 * @export
 * @returns {ClassDecorator}
 */
export declare function ownerOnly(): ClassDecorator;
