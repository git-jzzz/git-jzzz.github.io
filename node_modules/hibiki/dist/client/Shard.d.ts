/// <reference types="node" />
import * as Eris from "eris";
import { ClientConfig } from "pg";
import { PostgreSQL } from "../db/PostgreSQL";
import { CommandHandler } from "../ext/CommandHandler";
import { ExtensionManager, IExtOptions } from "../ext/ExtensionManager";
import { LocaleManager } from "../locale/LocaleManager";
import { Logger } from "./Logger";
import { WebSocketClient } from "./WebSocketClient";
/**
 * Options
 *
 * @export
 * @interface IHibikiOptions
 */
export interface IHibikiOptions {
    hibiki: {
        prefixes: string[];
        owners: string[];
        debug: boolean;
    };
    eris?: Eris.ClientOptions;
    ws: {
        host: string;
        port?: number;
        ssl?: boolean;
    };
    postgres: ClientConfig;
    ext: IExtOptions;
}
/**
 * Main Shard/Client class
 * @see https://abal.moe/Eris/docs/Client
 *
 * @param {string} token Token to use
 * @param {IHibikiOptions} hibikiOptions Options
 * @export
 * @class Shard
 * @extends {Eris.Client}
 */
export declare class Shard extends Eris.Client {
    hibikiOptions: IHibikiOptions;
    /**
     * PostgreSQL client
     *
     * @type {PostgreSQL}
     */
    pg: PostgreSQL;
    /**
     * WebSocket client
     *
     * @type {WebSocketClient}
     */
    ws: WebSocketClient;
    /**
     * Extension manager
     *
     * @type {ExtensionManager}
     */
    ext: ExtensionManager;
    /**
     * Command handler
     *
     * @type {CommandHandler}
     */
    ch: CommandHandler;
    /**
     * Locale manager
     *
     * @type {LocaleManager}
     */
    lm: LocaleManager;
    /**
     * Event loop block detector
     *
     * @type {NodeJS.Timer}
     */
    /**
     * Emitted when the event loop is blocked
     *
     * @memberof Shard
     * @event blocked
     */
    blocked: NodeJS.Timer;
    /**
     * Logger that logs things
     *
     * @type {Logger}
     */
    logger: Logger;
    constructor(token: string, hibikiOptions: IHibikiOptions);
    /**
     * Initializes the framework
     *
     * @param {number} [timeout] Timeout in ms
     * @returns {Promise<void>}
     */
    init(timeout?: number): Promise<void>;
    /**
     * Disconnects the shard
     *
     * @returns {Promise<void>}
     */
    disconnectShard(): Promise<void>;
    /**
     * Checks if all guilds are in the database
     *
     * @returns {Promise<void>}
     */
    checkGuilds(): Promise<void>;
}
