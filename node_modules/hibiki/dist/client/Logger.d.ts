import * as Eris from "eris";
/**
 * Logger
 *
 * @param {string} prefix Prefix to use
 * @param {boolean} debugMode Enable debug mode
 * @export
 * @class Logger
 */
export declare class Logger {
    private prefix;
    private debugMode;
    constructor(prefix: string, debugMode?: boolean);
    /**
     * Normal log
     *
     * @param {...any[]} args
     * @returns {void}
     */
    log(...args: any[]): void;
    /**
     * Logs as error
     *
     * @param {...any[]} args
     * @returns {void}
     */
    err(...args: any[]): void;
    /**
     * Logs as warning
     *
     * @param {...any[]} args
     * @returns {void}
     */
    warn(...args: any[]): void;
    /**
     * Logs as debug (only if debug mode is enabled)
     *
     * @param {...any[]} args
     * @returns {void}
     */
    debug(...args: any[]): void;
    /**
     * Logs as fail
     *
     * @param {...any[]} args
     * @returns {void}
     */
    fail(...args: any[]): void;
    /**
     * Logs as info
     *
     * @param {...any[]} args
     * @returns {void}
     */
    info(...args: any[]): void;
    /**
     * Logs as ok
     *
     * @param {...any[]} args
     * @returns {void}
     */
    ok(...args: any[]): void;
    /**
     * Logs a message
     *
     * @param {Eris.Message} msg
     * @returns {void}
     */
    msg(msg: Eris.Message): void;
    /**
     * Get a colored label based on type
     *
     * @private
     * @param {string} type
     * @returns {string}
     */
    private getLabel(type);
    /**
     * Base log thing
     *
     * @private
     * @param {string} type
     * @param {...any[]} args
     * @returns {string}
     */
    private base(type, ...args);
}
